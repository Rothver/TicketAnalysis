/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import main.consultantLinkedList.Node;

/**
 *
 * @author Artemis
 */
public class GUIHandler extends javax.swing.JFrame {

    /**
     * Creates new form GUIHandler
     */
    public GUIHandler() {
        htmlFiles = new simpleQueue();
        htmlFileNames = new DefaultListModel();
        initComponents();
    }

    /**
     * Creates new form GUIHandler with the controller
     *
     * @param Holder
     */
    public GUIHandler(MainController Holder) {
        reference = Holder;
        htmlFiles = new simpleQueue();
        htmlFileNames = new DefaultListModel();
        incidentListModel = new DefaultListModel();
        serviceListModel = new DefaultListModel();
        defaultTable = new DefaultTableModel(new Object[]{"Consultant", "Num Tickets Assigned", "Num Tickets Closed"}, 0);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bodyTabbedPane = new javax.swing.JTabbedPane();
        addHTMLPane = new javax.swing.JPanel();
        addHTMLFile = new javax.swing.JButton();
        htmlDisplayScroll = new javax.swing.JScrollPane();
        displayHTMLFiles = new javax.swing.JList<>();
        findingHTMLText = new javax.swing.JTextArea();
        readHTMLFiles = new javax.swing.JButton();
        removeHTMLFile = new javax.swing.JButton();
        ticketInfoPane = new javax.swing.JPanel();
        incidentListScrollPane = new javax.swing.JScrollPane();
        incidentList = new javax.swing.JList<>();
        removeIncident = new javax.swing.JButton();
        infoAreaScrollPane = new javax.swing.JScrollPane();
        ticketInfoArea = new javax.swing.JTextArea();
        displayTicketInfo = new javax.swing.JButton();
        analyzeTicketsButton = new javax.swing.JButton();
        consultantInfo = new javax.swing.JPanel();
        InfoTable = new javax.swing.JScrollPane();
        consultantInfoTable = new javax.swing.JTable();
        toCSV = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addHTMLFile.setText("Choose HTML Files");
        addHTMLFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHTMLFileActionPerformed(evt);
            }
        });

        displayHTMLFiles.setModel(htmlFileNames);
        htmlDisplayScroll.setViewportView(displayHTMLFiles);

        findingHTMLText.setEditable(false);
        findingHTMLText.setBackground(new java.awt.Color(240, 240, 240));
        findingHTMLText.setColumns(20);
        findingHTMLText.setLineWrap(true);
        findingHTMLText.setRows(5);
        findingHTMLText.setText("Select the HTML Files to interpret for ticket information here");

        readHTMLFiles.setText("Read HTML Files");
        readHTMLFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readHTMLFilesActionPerformed(evt);
            }
        });

        removeHTMLFile.setText("Remove File");
        removeHTMLFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeHTMLFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addHTMLPaneLayout = new javax.swing.GroupLayout(addHTMLPane);
        addHTMLPane.setLayout(addHTMLPaneLayout);
        addHTMLPaneLayout.setHorizontalGroup(
            addHTMLPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addHTMLPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addHTMLPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addHTMLPaneLayout.createSequentialGroup()
                        .addGroup(addHTMLPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addHTMLFile)
                            .addComponent(readHTMLFiles)
                            .addComponent(removeHTMLFile))
                        .addGap(18, 18, 18)
                        .addComponent(htmlDisplayScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE))
                    .addGroup(addHTMLPaneLayout.createSequentialGroup()
                        .addComponent(findingHTMLText, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        addHTMLPaneLayout.setVerticalGroup(
            addHTMLPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addHTMLPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(findingHTMLText, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(addHTMLPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addHTMLPaneLayout.createSequentialGroup()
                        .addComponent(addHTMLFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeHTMLFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(readHTMLFiles))
                    .addComponent(htmlDisplayScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(281, Short.MAX_VALUE))
        );

        bodyTabbedPane.addTab("Finding HTML Files", addHTMLPane);

        incidentList.setModel(incidentListModel);
        incidentListScrollPane.setViewportView(incidentList);

        removeIncident.setText("Remove Incident");
        removeIncident.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeIncidentActionPerformed(evt);
            }
        });

        ticketInfoArea.setColumns(20);
        ticketInfoArea.setLineWrap(true);
        ticketInfoArea.setRows(5);
        infoAreaScrollPane.setViewportView(ticketInfoArea);

        displayTicketInfo.setText("Display Info");
        displayTicketInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayTicketInfoActionPerformed(evt);
            }
        });

        analyzeTicketsButton.setText("Analyze Tickets");
        analyzeTicketsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeTicketsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ticketInfoPaneLayout = new javax.swing.GroupLayout(ticketInfoPane);
        ticketInfoPane.setLayout(ticketInfoPaneLayout);
        ticketInfoPaneLayout.setHorizontalGroup(
            ticketInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ticketInfoPaneLayout.createSequentialGroup()
                .addGroup(ticketInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ticketInfoPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(incidentListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(displayTicketInfo))
                    .addGroup(ticketInfoPaneLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(ticketInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(removeIncident)
                            .addComponent(analyzeTicketsButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(infoAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        ticketInfoPaneLayout.setVerticalGroup(
            ticketInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ticketInfoPaneLayout.createSequentialGroup()
                .addGroup(ticketInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ticketInfoPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(ticketInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(infoAreaScrollPane)
                            .addComponent(incidentListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)))
                    .addGroup(ticketInfoPaneLayout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(displayTicketInfo)))
                .addGap(18, 18, 18)
                .addComponent(removeIncident)
                .addGap(18, 18, 18)
                .addComponent(analyzeTicketsButton)
                .addContainerGap(155, Short.MAX_VALUE))
        );

        bodyTabbedPane.addTab("Incident Info", ticketInfoPane);

        consultantInfoTable.setModel(defaultTable);
        consultantInfoTable.setColumnSelectionAllowed(true);
        consultantInfoTable.setGridColor(new java.awt.Color(255, 255, 255));
        consultantInfoTable.getTableHeader().setReorderingAllowed(false);
        InfoTable.setViewportView(consultantInfoTable);
        consultantInfoTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        toCSV.setText("Push Data To CSV");
        toCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toCSVActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout consultantInfoLayout = new javax.swing.GroupLayout(consultantInfo);
        consultantInfo.setLayout(consultantInfoLayout);
        consultantInfoLayout.setHorizontalGroup(
            consultantInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(consultantInfoLayout.createSequentialGroup()
                .addGroup(consultantInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(consultantInfoLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(InfoTable, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(consultantInfoLayout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(toCSV)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        consultantInfoLayout.setVerticalGroup(
            consultantInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(consultantInfoLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(InfoTable, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(toCSV)
                .addContainerGap(125, Short.MAX_VALUE))
        );

        bodyTabbedPane.addTab("Consultant Info", consultantInfo);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bodyTabbedPane.addTab("Services Preformed", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bodyTabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bodyTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method for adding additional HTML Files to be read
     *
     * @param evt
     */
    private void addHTMLFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHTMLFileActionPerformed
        JFileChooser htmlChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        htmlChooser.setMultiSelectionEnabled(true);

        int result = htmlChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File[] tempFile = htmlChooser.getSelectedFiles();
            for (File f: tempFile){
            if (f.getName().contains(".htm")) {
                htmlFiles.add(f);
                updateHTMLList();
            }}
        }
    }//GEN-LAST:event_addHTMLFileActionPerformed

    /**
     * Tells the controller to read all HTML files in the ArrayList
     *
     * @param evt
     */
    private void readHTMLFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readHTMLFilesActionPerformed
        try {
            reference.readHTMLFiles(htmlFiles);
        } catch (IOException ex) {
            Logger.getLogger(GUIHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_readHTMLFilesActionPerformed

    /**
     * Removes the selected incident from the program's scope
     *
     * @param evt
     */
    private void removeIncidentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeIncidentActionPerformed
        reference.removeIncident(incidentList.getSelectedIndex());
        ticketInfoArea.setText("Incidnet Removed");
    }//GEN-LAST:event_removeIncidentActionPerformed

    /**
     * Removes the selected HTML File from the program's scope
     *
     * @param evt
     */
    private void removeHTMLFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeHTMLFileActionPerformed
        htmlFiles.remove(displayHTMLFiles.getSelectedIndex());
        removeItemHTMLFileList(displayHTMLFiles.getSelectedIndex());
    }//GEN-LAST:event_removeHTMLFileActionPerformed

    /**
     * Displays the TicketObject details in the text area
     *
     * @param evt
     */
    private void displayTicketInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayTicketInfoActionPerformed
        ticketInfoArea.setText(reference.displayTicket(incidentList.getSelectedIndex()));
    }//GEN-LAST:event_displayTicketInfoActionPerformed

    private void analyzeTicketsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeTicketsButtonActionPerformed
        reference.lookAtTickets();
    }//GEN-LAST:event_analyzeTicketsButtonActionPerformed

    private void toCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toCSVActionPerformed
        FileWriter returnString;
        try {
            returnString = new FileWriter("ConsultantData.csv");
            returnString.append("Consultant,Number of Tickets Assigned,Number of Tickets Closed\n");
            for (int r = 0; r < defaultTable.getRowCount(); r++) {
                for (int c = 0; c < defaultTable.getColumnCount(); c++) {
                    returnString.append(defaultTable.getValueAt(r, c) + ",");
                }
                returnString.append("\n");
            }
            returnString.flush();
            returnString.close();
        } catch (IOException ex) {
            Logger.getLogger(GUIHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_toCSVActionPerformed

    /**
     * Allows for removal of HTML File
     *
     * @param toRemove
     */
    private void removeItemHTMLFileList(int toRemove) {
        htmlFileNames.remove(toRemove);
    }

    /**
     * Used to add in the desired HTML File to the List
     */
    private void updateHTMLList() {
        htmlFileNames.addElement(((File)htmlFiles.getTail()).getName());
    }

    /**
     * ReLoads the Incident List if an incident is removed
     *
     * @param incidents
     */
    public void updateIncidentList(ArrayList<TicketObject> incidents) {
        incidentListModel.removeAllElements();
        for (TicketObject t : incidents) {
            incidentListModel.addElement(t.getAssignedTo());
        }

    }

    public void addTableData(String name, String ticketsAssigned, String ticketsClosed) {
        defaultTable.addRow(new Object[]{name, ticketsAssigned, ticketsClosed});
    }
    
    public void updateServiceList(Set toAdd){
        serviceListModel.removeAllElements();
        Object[] temp = toAdd.toArray();
        for (Object e:temp){
            serviceListModel.addElement(e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GUIHandler().setVisible(true);
        });
    }

    private MainController reference;
    private final simpleQueue htmlFiles;  //stores the files
    private final DefaultListModel htmlFileNames; //displays html files to interpret
    private DefaultListModel incidentListModel;
    private DefaultTableModel defaultTable;
    private DefaultListModel serviceListModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane InfoTable;
    private javax.swing.JButton addHTMLFile;
    private javax.swing.JPanel addHTMLPane;
    private javax.swing.JButton analyzeTicketsButton;
    private javax.swing.JTabbedPane bodyTabbedPane;
    private javax.swing.JPanel consultantInfo;
    private javax.swing.JTable consultantInfoTable;
    private javax.swing.JList<String> displayHTMLFiles;
    private javax.swing.JButton displayTicketInfo;
    private javax.swing.JTextArea findingHTMLText;
    private javax.swing.JScrollPane htmlDisplayScroll;
    private javax.swing.JList<String> incidentList;
    private javax.swing.JScrollPane incidentListScrollPane;
    private javax.swing.JScrollPane infoAreaScrollPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton readHTMLFiles;
    private javax.swing.JButton removeHTMLFile;
    private javax.swing.JButton removeIncident;
    private javax.swing.JTextArea ticketInfoArea;
    private javax.swing.JPanel ticketInfoPane;
    private javax.swing.JButton toCSV;
    // End of variables declaration//GEN-END:variables
}
